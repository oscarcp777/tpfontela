-----------------------------
servidor
-----------------------------
*
#include <iostream> 
#include <fstream> 

#define BLOCK 1024
*/
int block_sending(int *sock, const char *path) 
{ 
 
std::ifstream is; 
char pbuf[BLOCK]; 
int size, ofs, nbytes = 0, block = BLOCK; 


    
    is.open (path, std::ios::binary ); 

    is.seekg (0, std::ios::end); 
    size = is.tellg(); 
    is.seekg (0, std::ios::beg); 

    send(sock, reinterpret_cast<char*>(&size), sizeof size , 0); 

    for(ofs = 0; block == BLOCK; ofs += BLOCK) 
    { 

        if(size - ofs < BLOCK) block = size - ofs; 

            is.read(pbuf, block); 

        nbytes += send(*sock, pbuf, block, 0); 

    } 

    is.close(); 

return nbytes; 
} 

int main(int argc, char *argv[]){
int tcp_socket, tcp_new; 
struct sockaddr_in peer; 
 int nbytes;
 	WSADATA ws; 
WSAStartup(0x0101, &ws); 


    peer.sin_family = AF_INET; 
    peer.sin_port = htons(2121); 
    peer.sin_addr.s_addr = htonl(INADDR_ANY); 

    tcp_socket = socket(AF_INET, SOCK_STREAM, 0); 

    bind(tcp_socket, (struct sockaddr *)&peer, sizeof(peer)); 

    listen(tcp_socket, 3); 

    tcp_new = accept(tcp_socket, (struct sockaddr *)&peer, 0); 


   nbytes = block_sending(&tcp_new, "ServidorPrueba.html"); 

    printf("Bytes enviados: %d",nbytes); 

  closesocket(tcp_socket); 
  WSACleanup(); 

return 0; 
}


------------------------
cliente
------------------------
#include <iostream> 
#include <fstream> 
inline int block_recv(int &sock, const char *path) 
{ 
#define BLOCK 1024 
int size, ofs, nbytes = 0, block = BLOCK; 
char pbuf[BLOCK]; 

    std::ofstream os(path, std::ios::binary); 

    recv(sock, reinterpret_cast<char*>(&size), sizeof size, 0); 

    for(ofs = 0; block == BLOCK; ofs += BLOCK) 
    { 

        if(size - ofs < BLOCK) block = size - ofs; 

        nbytes += recv(sock, pbuf, block, 0); 

        os.write(pbuf, block); 
    } 

    os.close(); 

return nbytes; 
} 


int main(int argc, char *argv[])
{
   

WSADATA ws; 
WSAStartup(0x0101, &ws); 

int tcp_socket; 
struct sockaddr_in peer; 

    peer.sin_family = AF_INET; 
    peer.sin_port   = htons(2121); 
    peer.sin_addr.s_addr = inet_addr("localhost"); 

    tcp_socket = socket(AF_INET, SOCK_STREAM, 0); 

    if (tcp_socket < 0) 
    { 
       printf("ERROR: Couldn't open socket!\n"); 
       return -1; 
    } 

    connect(tcp_socket, (struct sockaddr*)&peer, sizeof(peer)); 


int nbytes = block_recv(tcp_socket, "ClientePrueba.html"); 

    std::cout << "bytes recibidos: " << nbytes << std::endl; 

    closesocket(tcp_socket); 
    WSACleanup(); 

return 0; 
} 

}